import requests
from typing import Union


URL_INDEX = 'https://es.vinoteqa.com/wines'
URL_SEARCH = URL_INDEX + '/_search'
URL_EXPLAIN = URL_INDEX + '/_explain'


def condition_name(name: str):
    """Formulate the query condition for the wine name.
    It can be given as input to `query_es`."""
    return {
        "multi_match": {
            "query": name,
            "fields": [
                "name"
            ],
            "type": "best_fields",
            "operator": "or",
                        "fuzziness": "AUTO"
        }
    }


def condition_winery_name(winery_name: str):
    """Formulate the query condition for the winery name.
    It can be given as input to `query_es`."""
    return {
        "multi_match": {
            "query": winery_name,
            "fields": [
                "winery_name^2"
            ],
            "type": "best_fields",
            "operator": "or",
                        "fuzziness": "1"
        }
    }


def condition_wine_type(wine_type: str):
    """Formulate the query condition for the wine type.
    It can be given as input to `query_es`."""
    return {
        "constant_score": {
            "filter": {
                "term": {
                    "type.keyword": wine_type.upper()
                }
            },
            'boost': 0
        }
    }


def query_es(conditions: Union[list, dict], num_results: int = 1):
    """Perform query on ElasticSearch index.

    Parameters
    ----------
    conditions: list | dict
        generated by the `condition_*` functions
    num_results : int
        Number of matches, sorted by decreasing score. by default 1

    Returns
    -------
    response : list of dict
        Response json of the ElasticSearch query.

        `None` if no match is found.

        Run `query_es_clean` for getting the first match and the score as separated values.
    """
    headers = {'Content-Type': 'application/json'}
    query = {
        "query": {
            "bool": {
                "must": conditions
            }
        },
        "size": num_results
    }

    try:
        response = requests.post(URL_SEARCH, headers=headers, json=query)
        return response.json()
    except Exception as e:
        print(f'ERROR', e)
        return None


def query_es_clean(conditions: Union[list, dict], match_rank: int = 1):
    """Perform query on ElasticSearch index.

    Parameters
    ----------
    conditions: list | dict
        generated by the `condition_*` functions
    match_rank : int, optional
        which ranked result to get, by default 1

    Returns
    -------
    match : dict
        Matching entry in the index.

        `None` if no match is found.

        Otherwise, the keys are:
        - `id`
        - `type`
        - `name`
        - `seo_name`
        - `winery_id`
        - `winery_name`
        - `winery_seo_name`

    score : float
        Matching score as calculated by ElasticSearch.

        `0` if no match is found.

        Run `query_explanation`
        for the explanation of the score.
    """
    response_json = query_es(conditions, match_rank)

    if response_json is None:
        return None, 0

    hits = response_json['hits']['hits']
    if len(hits) > match_rank-1:
        match = hits[match_rank-1]['_source']
        return match, hits[match_rank-1]['_score']
    return None, 0


def query_explain(conditions: Union[list, dict], matched_id: str = None, verbose: bool = True):
    """Perform query on ElasticSearch index
    and get explanation for how the score is computed.

    Parameters
    ----------
    conditions: list | dict
        generated by the `condition_*` functions
    matched_id : str, optional
        id of matched wine. If not provided,
        a query to the ElasticSearch index is performed
        to find the closest match

    Returns
    -------
    explanation : dict
        Breakdown of the score components.
        `None` if no match is found.
    """
    if matched_id is None:
        match, score = query_es_clean(conditions)
        if match is None:
            if verbose:
                print('No match')
            return
        matched_id = match['id']

    # perform explanation query
    url = URL_EXPLAIN + '/' + matched_id
    headers = {'Content-Type': 'application/json'}
    query = {
        "query": {
            "bool": {
                "must": conditions,
            }
        }
    }

    return requests.post(url, headers=headers, json=query).json()


def query_by_id(wine_id: Union[str, list]):
    """Query the ElasticSearch index by `'wine_id'`.

    Parameters
    ----------
    wine_id : str | list of str

    Returns
    -------
    response : dict
        response of the query.
    """

    headers = {'Content-Type': 'application/json'}

    query = {
        "query": {
            "terms": {
                "_id": wine_id,
                "boost": 1.0
            }
        },
        "size": len(wine_id),
        "sort": [
            {
                "_id": {
                    "order": "asc"
                }
            }
        ]
    }

    try:
        response = requests.post(URL_SEARCH, headers=headers, json=query)

        hits = response.json()['hits']['hits']
        if len(hits) == 0:
            return []
        return [hit['_source'] for hit in hits]

    except Exception as e:
        print(f'ERROR', e)
        return None
